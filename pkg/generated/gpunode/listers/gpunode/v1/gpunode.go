/*
Copyright Â© 2021 The nvidia-gpu-scheduler Authors.
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/caden2016/nvidia-gpu-scheduler/api/gpunode/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GpuNodeLister helps list GpuNodes.
// All objects returned here must be treated as read-only.
type GpuNodeLister interface {
	// List lists all GpuNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GpuNode, err error)
	// GpuNodes returns an object that can list and get GpuNodes.
	GpuNodes(namespace string) GpuNodeNamespaceLister
	GpuNodeListerExpansion
}

// gpuNodeLister implements the GpuNodeLister interface.
type gpuNodeLister struct {
	indexer cache.Indexer
}

// NewGpuNodeLister returns a new GpuNodeLister.
func NewGpuNodeLister(indexer cache.Indexer) GpuNodeLister {
	return &gpuNodeLister{indexer: indexer}
}

// List lists all GpuNodes in the indexer.
func (s *gpuNodeLister) List(selector labels.Selector) (ret []*v1.GpuNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GpuNode))
	})
	return ret, err
}

// GpuNodes returns an object that can list and get GpuNodes.
func (s *gpuNodeLister) GpuNodes(namespace string) GpuNodeNamespaceLister {
	return gpuNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GpuNodeNamespaceLister helps list and get GpuNodes.
// All objects returned here must be treated as read-only.
type GpuNodeNamespaceLister interface {
	// List lists all GpuNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GpuNode, err error)
	// Get retrieves the GpuNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.GpuNode, error)
	GpuNodeNamespaceListerExpansion
}

// gpuNodeNamespaceLister implements the GpuNodeNamespaceLister
// interface.
type gpuNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GpuNodes in the indexer for a given namespace.
func (s gpuNodeNamespaceLister) List(selector labels.Selector) (ret []*v1.GpuNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GpuNode))
	})
	return ret, err
}

// Get retrieves the GpuNode from the indexer for a given namespace and name.
func (s gpuNodeNamespaceLister) Get(name string) (*v1.GpuNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gpunode"), name)
	}
	return obj.(*v1.GpuNode), nil
}
